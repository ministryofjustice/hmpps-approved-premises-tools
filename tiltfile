docker_compose("./docker-compose.yml")

config.define_bool("local-api")
config.define_bool("local-ui")
config.define_bool("cas1")
config.define_bool("cas2")
config.define_bool("cas2v2")
config.define_bool("cas3")

cfg = config.parse()

local_api = cfg.get("local-api", False)
local_ui = cfg.get("local-ui", False)
cas1 = cfg.get("cas1", False)
cas2 = cfg.get("cas2", False)
cas2v2 = cfg.get("cas2v2", False)
cas3 = cfg.get("cas3", False)

resources = [
    "wiremock",
    "postgres",
    "redis",
    "localstack",
]

if local_api:
    print("Running local API")
    local_resource(
        "api-local",
        serve_cmd="./gradlew bootRunDebug --stacktrace",
        # Note! These checks only wait for containers to start, ideally we'd wait for them to be ready
        # see https://docs.tilt.dev/resource_dependencies.html
        # "For dc_resource: the container is started (NB: Tilt doesnâ€™t currently observe docker-compose health checks)"
        resource_deps=["postgres", "redis", "localstack", "wiremock"],
        serve_dir=os.getenv("LOCAL_CAS_API_PATH"),
        readiness_probe=probe(
            period_secs=15, http_get=http_get_action(port=8080, path="/health")
        ),
        serve_env={
            "BOOT_RUN_ENV_FILE": os.getcwd() + '/.env.api'
        }
    )
    resources.append("api-local")
else:
    print("Running docker API")
    resources.append("api")

if cas1:
    if local_ui:
        npm_command='export $(cat ' + os.getcwd() + '/.env.cas1-ui) && npm run start:dev'

        local_resource(
            "cas1-ui-local",
            cmd="npm install",
            serve_cmd=npm_command,
            serve_dir=os.getenv("LOCAL_CAS1_UI_PATH"),
            dir=os.getenv("LOCAL_CAS1_UI_PATH"),
            resource_deps=["redis"],
            readiness_probe=probe(
                period_secs=15, http_get=http_get_action(port=3000, path="/health")
            )
        )
        resources.append("cas1-ui-local")
    else:
        resources.append("cas1-ui")

if cas2:
    if local_ui:
        npm_command='export $(cat ' + os.getcwd() + '/.env.cas2-ui) && npm run start:dev'

        local_resource(
            "cas2-ui-local",
            cmd="npm install",
            serve_cmd=npm_command,
            serve_dir=os.getenv("LOCAL_CAS2_UI_PATH"),
            dir=os.getenv("LOCAL_CAS2_UI_PATH"),
            resource_deps=["redis"],
            readiness_probe=probe(
                period_secs=15, http_get=http_get_action(port=3000, path="/health")
            )
        )
        resources.append("cas2-ui-local")
    else:
        resources.append("cas2-ui")

if cas2v2:
    if local_ui:
        npm_command='export $(cat ' + os.getcwd() + '/.env.cas2v2-ui) && npm run start:dev'

        local_resource(
            "cas2v2-ui-local",
            cmd="npm install",
            serve_cmd=npm_command,
            serve_dir=os.getenv("LOCAL_CAS2V2_UI_PATH"),
            dir=os.getenv("LOCAL_CAS2V2_UI_PATH"),
            resource_deps=["redis"],
            readiness_probe=probe(
                period_secs=15, http_get=http_get_action(port=3000, path="/health")
            )
        )
        resources.append("cas2v2-ui-local")
    else:
        resources.append("cas2v2-ui")

if cas3:
    if local_ui:
        npm_command='export $(cat ' + os.getcwd() + '/.env.cas3-ui) && npm run start:dev'

        local_resource(
            "cas3-ui-local",
            cmd="npm install",
            serve_cmd=npm_command,
            serve_dir=os.getenv("LOCAL_CAS3_UI_PATH"),
            dir=os.getenv("LOCAL_CAS3_UI_PATH"),
            resource_deps=["redis"],
            readiness_probe=probe(
                period_secs=15, http_get=http_get_action(port=3000, path="/health")
            )
        )
        resources.append("cas3-ui-local")
    else:
        resources.append("cas3-ui")

config.clear_enabled_resources()

print("Loading resources...")
print(resources)

config.set_enabled_resources(resources)
