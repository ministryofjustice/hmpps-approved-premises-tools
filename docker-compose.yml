services:
  api:
    image: quay.io/hmpps/hmpps-approved-premises-api:latest
    container_name: approved-premises-api-dev
    pull_policy: always
    depends_on:
      - database
      - redis
      - hmpps-auth
    env_file:
      - .env.api
    ports:
      - "8080:8080"

  frontend:
    image: quay.io/hmpps/hmpps-approved-premises-ui:latest
    container_name: approved-premises-ui-dev
    pull_policy: always
    environment:
      - REDIS_HOST=approved-premises-redis-dev
      - REDIS_PORT=6379
      - REDIS_TLS_ENABLED=false
      - REDIS_AUTH_TOKEN=
      - HMPPS_AUTH_EXTERNAL_URL=http://localhost:9091/auth
      - HMPPS_AUTH_URL=http://hmpps-auth:8080/auth
      - API_CLIENT_ID=approved-premises-ui
      - API_CLIENT_SECRET=clientsecret
      - SYSTEM_CLIENT_ID=approved-premises-ui
      - SYSTEM_CLIENT_SECRET=clientsecret
      - SESSION_SECRET=app-insecure-default-session
      - NODE_ENV=development
      - TOKEN_VERIFICATION_API_URL=http://hmpps-auth:8080/verification
      - APPROVED_PREMISES_API_URL=http://host.docker.internal:8080
      - INGRESS_URL=http://localhost:3000
    ports:
      - "3000:3000"
    entrypoint: "node dist/server.js | bunyan"

  database:
    image: "postgis/postgis"
    container_name: approved-premises-postgres-dev
    environment:
      - POSTGRES_USER=localdev
      - POSTGRES_PASSWORD=localdev_password
      - POSTGRES_DB=approved_premises_localdev
    volumes:
      # We use a docker managed volume instead of a mapped volume (e.g. 'databases/api') before the
      # mapped volumes are very slow meaning from scratch postgres startup is taking a very long time
      # This coupled with the fact that when using --local-api tilt will only check if postgres is running (not ready)
      # before starting the API is leading to start up failures
      - database-data-api:/var/lib/postgresql/data/
    ports:
      - "5431:5432"
    healthcheck:
      test: pg_isready -U localdev -d approved_premises_localdev

  hmpps-auth:
    image: quay.io/hmpps/hmpps-auth:latest
    container_name: hmpps-auth
    pull_policy: always
    ports:
      - "9091:8080"
      - "5001:5005"
    volumes:
      - ./seed/hmpps-auth:/seed
    entrypoint: "java -Dcom.sun.management.jmxremote.local.only=false -Djava.security.egd=file:/dev/./urandom -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5005 -jar /app/app.jar"
    healthcheck:
      test: ["CMD", "echo", "-n > '/dev/tcp/127.0.0.1/8080'"]
    environment:
      - SPRING_PROFILES_ACTIVE=dev,nomis,delius,local-postgres
      - NOMIS_ENDPOINT_URL=http://nomis-user-roles-api:8080
      - APPLICATION_AUTHENTICATION_UI_ALLOWLIST=0.0.0.0/0
      - SPRING_H2_CONSOLE_SETTINGS_WEBALLOWOTHERS=true
      - DELIUS_ENABLED=true
      - DELIUS_ENDPOINT_URL=http://wiremock:8080
      - DELIUS_ENDPOINT_TIMEOUT=1s
      - DELIUS_CLIENT_CLIENT-ID=delius-auth-api-client
      - DELIUS_CLIENT_CLIENT-SECRET=delius-auth-api-client
      - LOGGING_LEVEL_UK_GOV_JUSTICE=debug
      - SPRING_FLYWAY_LOCATIONS=classpath:db/auth,db/dev/data/auth_{vendor},db/dev/data/auth,filesystem:/seed
      - SPRING_DATASOURCE_URL=jdbc:postgresql://auth-db:5432/auth-db

  community-api:
    image: quay.io/hmpps/community-api:latest
    container_name: community-api
    pull_policy: always
    ports:
      - "9590:8080"
    volumes:
      - ./seed/community-api:/seed
      - ./databases/community-api-db:/community-api-db
    environment:
      - SERVER_PORT=8080
      - SPRING_PROFILES_ACTIVE=dev
      - SPRING_H2_CONSOLE_SETTINGS_WEBALLOWOTHERS=true
      - LOGGING_LEVEL_UK_GOV_JUSTICE=debug
      - SPRING_DATASOURCE_URL=jdbc:h2:file:/community-api-db/community-ap-db;MODE=Oracle;AUTO_SERVER=TRUE;AUTO_SERVER_PORT=9092
      - SPRING_FLYWAY_LOCATIONS=classpath:/db/schema,classpath:/db/data,filesystem:/seed
      - ALFRESCO_BASEURL=http://wiremock:8080/alfresco

  wiremock:
    image: wiremock/wiremock
    container_name: wiremock
    ports:
      - "9004:8080"
    volumes:
      - ./wiremock:/home/wiremock
    command: "--global-response-templating"

  prison-api:
    image: quay.io/hmpps/prison-api:latest
    container_name: prison-api
    pull_policy: always
    ports:
      - "9570:8080"
    environment:
      - SERVER_PORT=8080
      - SPRING_PROFILES_ACTIVE=nomis-hsqldb
      - SPRING_DATASOURCE_URL=jdbc:hsqldb:file:/nomis-db/nomisdb;sql.syntax_ora=true;get_column_name=false;shutdown=false;sql.nulls_first=false;sql.nulls_order=false;hsqldb.lock_file=false
      - SPRING_DATASOURCE_USERNAME=sa
      - SPRING_DATASOURCE_PASSWORD=password
      - SPRING_REPLICA_DATASOURCE_URL=jdbc:hsqldb:file:/nomis-db/nomisdb;sql.syntax_ora=true;get_column_name=false;shutdown=false;sql.nulls_first=false;sql.nulls_order=false;hsqldb.lock_file=false
      - SPRING_REPLICA_DATASOURCE_USERNAME=sa
      - SPRING_REPLICA_DATASOURCE_PASSWORD=password
      - LOGGING_LEVEL_UK_GOV_JUSTICE=debug
      - SPRING_FLYWAY_LOCATIONS=classpath:/db/migration/nomis/ddl,classpath:/db/migration/data,classpath:/db/migration/nomis/data,classpath:/db/migration/nomis/data-hsqldb,filesystem:/seed
      - SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_JWK_SET_URI=http://hmpps-auth:8080/auth/.well-known/jwks.json
    volumes:
      - ./databases/prison-api:/nomis-db
      - ./seed/prison-api:/seed

  nomis-user-roles-api:
    image: quay.io/hmpps/nomis-user-roles-api:latest
    container_name: nomis-user-roles-api
    pull_policy: always
    depends_on:
      - hmpps-auth
    ports:
      - "9575:8080"
    volumes:
      - ./seed/nomis-user-roles:/seed
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health/ping"]
    environment:
      - SERVER_PORT=8080
      - SPRING_PROFILES_ACTIVE=dev
      - API_BASE_URL_OAUTH=http://hmpps-auth:8080/auth
      - SPRING_FLYWAY_LOCATIONS=classpath:db/migration,classpath:db/dev,filesystem:/seed

  hmpps-manage-users-api:
    image: quay.io/hmpps/hmpps-manage-users-api:latest
    container_name: hmpps-manage-users-api
    pull_policy: always
    depends_on:
      - hmpps-auth
    ports:
      - "9560:8096"
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8096/health/ping" ]
    environment:
      - SERVER_PORT=8096
      - HMPPS_AUTH_ENDPOINT_URL=http://hmpps-auth:8080/auth
      - API_BASE_URL_OAUTH=http://hmpps-auth:8080/auth
      - SPRING_PROFILES_ACTIVE=dev
      - EXTERNAL_USERS_ENDPOINT_URL=http://hmpps-external-users-api:8098
      - NOMIS_ENDPOINT_URL=http://nomis-user-roles-api:8080
      - AUTHORIZATION_SERVER_TOKEN_ENDPOINT_URL=http://hmpps-auth:8080/auth/oauth/token

  hmpps-external-users-api:
    image: quay.io/hmpps/hmpps-external-users-api:latest
    container_name: hmpps-external-users-api
    pull_policy: always
    depends_on:
      - auth-db
      - hmpps-auth
    ports:
      - "9565:8098"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8098/health/ping"]
    environment:
      - SERVER_PORT=8098
      - SPRING_PROFILES_ACTIVE=dev,local-postgres
      - SPRING_R2DBC_URL=r2dbc:postgresql://auth-db:5432/auth-db?sslmode=prefer
      - SPRING_FLYWAY_ENABLED=false
      - SPRING_FLYWAY_URL=jdbc:postgresql://auth-db:5432/auth-db?sslmode=prefer
      - API_BASE_URL_OAUTH=http://hmpps-auth:8080/auth
      - HMPPS_SQS_PROVIDER=localstack
      - HMPPS_SQS_LOCALSTACKURL=http://approved-premises-api-localstack:4566

  auth-db:
    image: postgres:15
    container_name: auth-db
    restart: always
    ports:
      - "5434:5432"
    environment:
      - POSTGRES_PASSWORD=admin_password
      - POSTGRES_USER=admin
      - POSTGRES_DB=auth-db
    healthcheck:
      test: pg_isready -d auth-db

  redis:
    image: "bitnami/redis:7.2.5"
    container_name: approved-premises-redis-dev
    environment:
      - ALLOW_EMPTY_PASSWORD=yes
    ports:
      - "6379:6379"

  redis-commander:
    container_name: redis-commander
    hostname: redis-commander
    image: ghcr.io/joeferner/redis-commander:latest
    restart: always
    environment:
      - REDIS_HOSTS=frontend:approved-premises-redis-dev:6379:0,api-cache:approved-premises-redis-dev:6379:5
    ports:
      - "7341:8081"

  localstack:
    image: localstack/localstack:3.4.0
    container_name: approved-premises-api-localstack
    ports:
      - "4566:4566"
      - "4571:4571"
      - 8999:8080
    environment:
      - SERVICES=sns,sqs
      - DEBUG=${DEBUG- }
      - DOCKER_HOST=unix:///var/run/docker.sock
      - DEFAULT_REGION=eu-west-2
    volumes:
      - "${TMPDIR:-/tmp/localstack}:/var/lib/localstack"
      - "/var/run/docker.sock:/var/run/docker.sock"

volumes:
  database-data-api:
