services:

  api:
    image: quay.io/hmpps/hmpps-approved-premises-api:latest
    container_name: ap-tools-api
    pull_policy: always
    depends_on:
      - postgres
      - redis
      - wiremock
      - localstack
    # using raw format disables interpolation, which causes errors when values include '$'
    # note that intellij doesn't think this is valid but is i
    # https://youtrack.jetbrains.com/issue/IJPL-68738/Docker-Compose.-Editor.-Path-property-of-envfile-attribute-is-not-recognized
    env_file:
      - path: .env.api
        format: raw
    ports:
      - "8080:8080"
    environment:
      - JAVA_TOOL_OPTIONS=-XX:UseSVE=0
      - SPRING_DATASOURCE_URL=jdbc:postgresql://ap-tools-postgres/approved_premises_localdev
      - SPRING_DATA_REDIS_HOST=ap-tools-redis
      - SEED_FILE-PREFIX=/tmp/seed
      - HMPPS_SQS_PROVIDER=localstack
      - HMPPS_SQS_LOCALSTACKURL=http://ap-tools-localstack:4566
      - SERVICES_HMPPS-TIER_BASE-URL=http://ap-tools-wiremock:8080/hmpps-tier-proxy
      - SERVICES_PRISONS-API_BASE-URL=http://ap-tools-wiremock:8080/prisons-api-proxy
      - SERVICES_PROBATION-OFFENDER-SEARCH-API_BASE-URL=http://ap-tools-wiremock:8080/probation-offender-search-proxy
      - SERVICES_CASE-NOTES_BASE-URL=http://ap-tools-wiremock:8080/case-notes-proxy
      - SERVICES_AP-OASYS-CONTEXT-API_BASE-URL=http://ap-tools-wiremock:8080/ap-and-oasys-proxy
      - SERVICES_AP-DELIUS-CONTEXT-API_BASE-URL=http://ap-tools-wiremock:8080/ap-and-delius-proxy
      - SERVICES_GOV-UK-BANK-HOLIDAYS-API_BASE-URL=http://ap-tools-wiremock:8080/gov-uk-bank-holidays-proxy
      - SERVICES_PRISONER-ALERTS-API_BASE-URL=http://ap-tools-wiremock:8080/prisoner-alerts-proxy
      - SERVICES_MANAGE-ADJUDICATIONS-API_BASE-URL=http://ap-tools-wiremock:8080/manage-adjudications-proxy

  # Only one of the following frontends is used, this is controlled by tilt via the tiltfile

  cas1-ui:
    image: quay.io/hmpps/hmpps-approved-premises-ui:latest
    container_name: ap-tools-cas1-ui
    pull_policy: always
    depends_on:
      - redis
    env_file:
      - path: .env.cas1-ui
        format: raw
    ports:
      - "3000:3000"
    environment:
      - JAVA_TOOL_OPTIONS=-XX:UseSVE=0
      - REDIS_HOST=ap-tools-redis
      - APPROVED_PREMISES_API_URL=http://host.docker.internal:8080
      - INGRESS_URL=http://localhost:3000
    entrypoint: "node dist/server.js | bunyan"

  cas2-ui:
    image: quay.io/hmpps/hmpps-community-accommodation-tier-2-ui:latest
    container_name: ap-tools-cas2-ui
    pull_policy: always
    depends_on:
      - redis
    env_file:
      - path: .env.cas2-ui
        format: raw
    ports:
      - "3000:3000"
    environment:
      - JAVA_TOOL_OPTIONS=-XX:UseSVE=0
      - REDIS_HOST=ap-tools-redis
      - APPROVED_PREMISES_API_URL=http://host.docker.internal:8080
      - INGRESS_URL=http://localhost:3000
    entrypoint: "node dist/server.js | bunyan"

  cas2v2-ui:
    image: ghcr.io/ministryofjustice/hmpps-community-accommodation-tier-2-bail-ui:latest
    container_name: ap-tools-cas2v2-ui
    pull_policy: always
    depends_on:
      - redis
    env_file:
      - path: .env.cas2v2-ui
        format: raw
    ports:
      - "3000:3000"
    environment:
      - JAVA_TOOL_OPTIONS=-XX:UseSVE=0
      - REDIS_HOST=ap-tools-redis
      - APPROVED_PREMISES_API_URL=http://host.docker.internal:8080
      - INGRESS_URL=http://localhost:3000
    entrypoint: "node dist/server.js | bunyan"

  cas3-ui:
    image: quay.io/hmpps/hmpps-temporary-accommodation-ui:latest
    container_name: ap-tools-cas3-ui
    pull_policy: always
    depends_on:
      - redis
    env_file:
      - path: .env.cas3-ui
        format: raw
    ports:
      - "3000:3000"
    environment:
      - JAVA_TOOL_OPTIONS=-XX:UseSVE=0
      - REDIS_HOST=ap-tools-redis
      - APPROVED_PREMISES_API_URL=http://host.docker.internal:8080
      - INGRESS_URL=http://localhost:3000
    entrypoint: "node dist/server.js | bunyan"

  postgres:
    # we align with the version of postgres used in AWS
    image: "postgis/postgis:14-3.5"
    platform: linux/amd64
    container_name: ap-tools-postgres
    environment:
      - JAVA_TOOL_OPTIONS=-XX:UseSVE=0
      - POSTGRES_USER=localdev
      - POSTGRES_PASSWORD=localdev_password
      - POSTGRES_DB=approved_premises_localdev
    volumes:
      # We use a docker managed volume instead of a mapped volume because the
      # mapped volumes are very slow meaning from scratch postgres startup is taking a very long time
      # This coupled with the fact that when using --local-api tilt will only check if postgres is running (not ready)
      # before starting the API is leading to start up failures
      - ap-tool-postgres-data-api:/var/lib/postgresql/data/
    ports:
      - "5431:5432"
    healthcheck:
      test: pg_isready -U localdev -d approved_premises_localdev

  wiremock:
    image: wiremock/wiremock
    container_name: ap-tools-wiremock
    ports:
      - "9004:8080"
    volumes:
      - ./wiremock:/home/wiremock
    command: "--global-response-templating --verbose"
    healthcheck:
      # we use a custom healthcheck because calling /health
      # in wiremock outputs in verbose request/response logs, and
      # we're not interested in seeing this request
      test: bash -c "exec 6<> /dev/tcp/localhost/8080"

  redis:
    image: "bitnami/redis:7.2.5"
    container_name: ap-tools-redis
    environment:
      - JAVA_TOOL_OPTIONS=-XX:UseSVE=0
      - ALLOW_EMPTY_PASSWORD=yes
    ports:
      - "6379:6379"

  localstack:
    image: localstack/localstack:3.4.0
    container_name: ap-tools-localstack
    ports:
      - "4566:4566"
      - "4571:4571"
      - "8999:8080"
    environment:
      - JAVA_TOOL_OPTIONS=-XX:UseSVE=0
      - SERVICES=sns,sqs
      - DEBUG=${DEBUG- }
      - DOCKER_HOST=unix:///var/run/docker.sock
      - DEFAULT_REGION=eu-west-2
    volumes:
      - "${TMPDIR:-/tmp/localstack}:/var/lib/localstack"
      - "/var/run/docker.sock:/var/run/docker.sock"

volumes:
  ap-tool-postgres-data-api:
