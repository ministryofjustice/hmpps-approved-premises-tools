services:
  api:
    image: quay.io/hmpps/hmpps-approved-premises-api:latest
    container_name: approved-premises-api-dev
    pull_policy: always
    depends_on:
      - database
      - redis
    env_file:
      - .env.api.dev-upstream-gradle
    ports:
      - "8080:8080"
    environment:
      - JAVA_TOOL_OPTIONS=-XX:UseSVE=0

  frontend:
    image: quay.io/hmpps/hmpps-approved-premises-ui:latest
    container_name: approved-premises-ui-dev
    pull_policy: always
    environment:
      - JAVA_TOOL_OPTIONS=-XX:UseSVE=0
      - REDIS_HOST=approved-premises-redis-dev
      - REDIS_PORT=6379
      - REDIS_TLS_ENABLED=false
      - REDIS_AUTH_TOKEN=
      - HMPPS_AUTH_EXTERNAL_URL=https://sign-in-dev.hmpps.service.justice.gov.uk/auth
      - HMPPS_AUTH_URL=https://sign-in-dev.hmpps.service.justice.gov.uk/auth
      - API_CLIENT_ID=approved-premises-ui
      - API_CLIENT_SECRET=clientsecret
      - SYSTEM_CLIENT_ID=approved-premises-ui-client-1
      - SYSTEM_CLIENT_SECRET=<system_client_secret>
      - SESSION_SECRET=app-insecure-default-session
      - NODE_ENV=development
      - TOKEN_VERIFICATION_API_URL=https://token-verification-api-dev.prison.service.justice.gov.uk
      - APPROVED_PREMISES_API_URL=http://host.docker.internal:8080
      - INGRESS_URL=http://localhost:3000
    ports:
      - "3000:3000"
    entrypoint: "node dist/server.js | bunyan"

  database:
    # we align with the version of postgres used in AWS
    image: "postgis/postgis:14-3.5"
    container_name: approved-premises-postgres-dev
    environment:
      - JAVA_TOOL_OPTIONS=-XX:UseSVE=0
      - POSTGRES_USER=localdev
      - POSTGRES_PASSWORD=localdev_password
      - POSTGRES_DB=approved_premises_localdev
    volumes:
      # We use a docker managed volume instead of a mapped volume (e.g. 'databases/api') before the
      # mapped volumes are very slow meaning from scratch postgres startup is taking a very long time
      # This coupled with the fact that when using --local-api tilt will only check if postgres is running (not ready)
      # before starting the API is leading to start up failures
      - database-data-api:/var/lib/postgresql/data/
    ports:
      - "5431:5432"
    healthcheck:
      test: pg_isready -U localdev -d approved_premises_localdev

  wiremock:
    image: wiremock/wiremock
    container_name: wiremock
    ports:
      - "9004:8080"
    volumes:
      - ./wiremock:/home/wiremock
    command: "--global-response-templating"

  redis:
    image: "bitnami/redis:7.2.5"
    container_name: approved-premises-redis-dev
    environment:
      - JAVA_TOOL_OPTIONS=-XX:UseSVE=0
      - ALLOW_EMPTY_PASSWORD=yes
    ports:
      - "6379:6379"

  redis-commander:
    container_name: redis-commander
    hostname: redis-commander
    image: ghcr.io/joeferner/redis-commander:latest
    restart: always
    environment:
      - JAVA_TOOL_OPTIONS=-XX:UseSVE=0
      - REDIS_HOSTS=frontend:approved-premises-redis-dev:6379:0,api-cache:approved-premises-redis-dev:6379:5
    ports:
      - "7341:8081"

  localstack:
    image: localstack/localstack:3.4.0
    container_name: approved-premises-api-localstack
    ports:
      - "4566:4566"
      - "4571:4571"
      - 8999:8080
    environment:
      - JAVA_TOOL_OPTIONS=-XX:UseSVE=0
      - SERVICES=sns,sqs
      - DEBUG=${DEBUG- }
      - DOCKER_HOST=unix:///var/run/docker.sock
      - DEFAULT_REGION=eu-west-2
    volumes:
      - "${TMPDIR:-/tmp/localstack}:/var/lib/localstack"
      - "/var/run/docker.sock:/var/run/docker.sock"

volumes:
  database-data-api:
